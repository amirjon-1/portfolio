// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// Author: Agustín Hönnun (https://sketchfab.com/Agustin_Honnun)
// License: SKETCHFAB Standard (https://sketchfab.com/licenses)
// Source: https://sketchfab.com/3d-models/imac-computer-e632ef53df614e30b9983089ff984fa4
// Title: iMac Computer
// */

// import React, { useRef } from 'react'
// import { useGLTF, useTexture } from '@react-three/drei'


// const HackerRoom = (props) => {
//   const { nodes, materials } = useGLTF('/models/comp.gltf')
//   return (
//     <group {...props} dispose={null}>
//       <group rotation={[-Math.PI / 2, 0, 0]} scale={0.005}>
//         <group rotation={[Math.PI / 2, 0, 0]}>
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Display_iMac_0.geometry}
//             material={materials.iMac}
//             position={[2.684, 83.159, 64.775]}
//             rotation={[-1.484, 0, -Math.PI]}
//             scale={100}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Base_Base_0.geometry}
//             material={materials.Base}
//             position={[2.684, -0.125, 67.889]}
//             rotation={[-Math.PI / 2, 0, -Math.PI]}
//             scale={100}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Keyboard_Keyboard_0.geometry}
//             material={materials.Keyboard}
//             position={[22.163, 1.566, -0.477]}
//             rotation={[-1.58, 0, 3.139]}
//             scale={100}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Mouse001_Mouse_0.geometry}
//             material={materials.Mouse}
//             position={[-49.729, 1.055, 2.455]}
//             rotation={[-Math.PI / 2, 0, 0.023]}
//             scale={100}
//           />
//         </group>
//       </group>
//     </group>
//   )
// }
// useGLTF.preload('/models/comp.gltf')
// useTexture.preload('/models/texture')

// export default HackerRoom



import * as THREE from "three"
import { Canvas, useFrame, useThree } from "@react-three/fiber"
import { Html, Outlines, Environment, useTexture } from "@react-three/drei"
import { Physics, useSphere } from "@react-three/cannon"
import { EffectComposer, N8AO, SMAA, Bloom } from "@react-three/postprocessing"
import { useControls } from "leva"
import React, { useState, useEffect } from "react";


const rfs = THREE.MathUtils.randFloatSpread
const sphereGeometry = new THREE.SphereGeometry(1, 32, 32)
const baubleMaterial = new THREE.MeshStandardMaterial({ color: "white", roughness: 0, envMapIntensity: 1 })




const HackerRoom = () => (
  <Canvas shadows gl={{ antialias: false }} dpr={[1, 1.5]} camera={{ position: [0, 0, 20], fov: 35, near: 1, far: 40 }}>
    <ambientLight intensity={0.5} />
    <color attach="background" args={["#F5F5F5"]} />
    <spotLight intensity={1} angle={0.2} penumbra={1} position={[30, 30, 30]} castShadow shadow-mapSize={[512, 512]} />
    <Physics gravity={[0, 2, 0]} iterations={10}>
      <Pointer />
      <Clump />
    </Physics>
    <Environment files="public/adamsbridge.hdr" />
    <EffectComposer disableNormalPass multisampling={0}>
      <N8AO halfRes color="black" aoRadius={2} intensity={1} aoSamples={6} denoiseSamples={4} />
      <Bloom mipmapBlur levels={7} intensity={1} />
      <SMAA />
    </EffectComposer>
    {/* <Html position={[0, 0, 0]} center>
      <div 
      style={{ color: "BLACK", fontSize: "100px", fontWeight: "bold", borderRadius: "5px", width: "150%", textAlign: "center",  
    }}
      >
        Hi, I am Amir
       </div>


    </Html> */}

<Html
  center
  style={{
    position: "fixed",  // Keeps the text fixed in the viewport
    top: "50%",         // Centers vertically in the viewport
    left: "50%",        // Centers horizontally in the viewport
    transform: "translate(-50%, -50%)", // Precise centering
    zIndex: -1,         // Ensures the text appears above other elements
    pointerEvents: "none", // Allows interaction with the 3D scene
  }}
>
  <p
    style={{
      color: "black",
      fontSize: "100px",
      fontWeight: "bold",
      textAlign: "center",
      padding: "20px",
      borderRadius: "5px",
    }}
  >
Solutions That Matter.</p>
</Html>

  </Canvas>
)

function Clump({ mat = new THREE.Matrix4(), vec = new THREE.Vector3(), ...props }) {
  const { outlines } = 0.0;
  const texture = useTexture("public/cross.jpg")
  const [ref, api] = useSphere(() => ({ args: [1], mass: 1, angularDamping: 0.1, linearDamping: 0.65, position: [rfs(20), rfs(20), rfs(20)] }))
  useFrame((state) => {
    for (let i = 0; i < 40; i++) {
      ref.current.getMatrixAt(i, mat)
  
      api.at(i).applyForce(vec.setFromMatrixPosition(mat).normalize().multiplyScalar(-40).toArray(), [0, 0, 0])
    }
  })
  return (
    <instancedMesh ref={ref} castShadow receiveShadow args={[sphereGeometry, baubleMaterial, 20]} material-map={texture}>
      <Outlines thickness={outlines} />
    </instancedMesh>
  )
}

function Pointer() {
  const viewport = useThree((state) => state.viewport)
  const [ref, api] = useSphere(() => ({ type: "Kinematic", args: [3], position: [0, 0, 0] }))
  useFrame((state) => api.position.set((state.mouse.x * viewport.width) / 2, (state.mouse.y * viewport.height) / 2, 0))
  return (
    <mesh ref={ref} scale={0.2}>
      <sphereGeometry />
      <meshBasicMaterial color={[4, 4, 4]} toneMapped={false} />
      <pointLight intensity={8} distance={10} />
    </mesh>
  )
}


export default HackerRoom
